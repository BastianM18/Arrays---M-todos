// PRACTICA - METODOS (map,filter,reduce.sort,...)

 const students = [
  {
    name: "Jill",
    lastname: "Doe",
    age: 23,
    course: "Marketing",
  },
  {
    name: "John",
    lastname: "Doe",
    age: 20,
    course: "Web Development",
  },
  {
    name: "Jack",
    lastname: "Doe",
    age: 22,
    course: "Accounting",
  },
  {
    name: "Ryan",
    lastname: "Ray",
    age: 20,
    course: "Web Development",
  },
  {
    name: "Jane",
    lastname: "Doe",
    age: 21,
    course: "Financial Management",
  },
];

/*

MOSTRAR ARREGLOS con Métodos Array

//MÉTODO For

for(let i = 0; i < students.length; i++) {
  console.log(students[i])
}




// MÉTODO forEach

students.forEach(function (student) {
  console.log(student);
})

students.forEach(function (student,index,students) {
  console.log(student);
  console.log(index);
  console.log(students);    
})




// Funcion flecha

students.forEach((student) => {console.log(student)})

De esta manera accedemos a la información de la lista de estudiantes, si quisieramos acceder 
a alguna informacion en especifico como la edad de los estudiantes, simplemente accedo con 
anotacion de puntos, como a continuación:

students.forEach((student) => {console.log(student.age)})




// MÉTODO Map

//Map crea un nuevo array con los resultados de la llamada a la función indicada aplicados 
a cada uno de sus elementos, podríamos usarlo de la siguiente manera

const result = students.map(function(student){
  return student
})

console.log(result);

//También podríamos usarlo para mostrar concatenación de valores

const fullnames = students.map(function(student){
  return student.name + " " + student.lastname;
})

console.log(fullnames); 

//Otra forma de escribir los map (funcion flecha)

const names = students.map(student => student.name)
console.log(names)

//Y si quisiera concatenar como lo hice en el objeto fullnames, haríamos lo siguiente

const names = students.map(student => student.name + ` ` + student.lastname)
console.log(names) 

También podemos alterar un objeto

const names = students.map(student => {
  return {
    fullname: student.name + ` ` + student.lastname,//nueva propiedad
    age: student.age,
    course: student.course,
    title: student.name + `-` + student.course
  }
})

console.log(names)

// Pero si Students fuera un objeto mucho más grande, hacer lo que hicimos anteriormente 
no sería muy práctico, tendríamos que pasar todos los datos pertenecientes al objeto, para 
eso tenemos algo llamado Spread Operator, nos permite distribuir los elementos de un 
arreglo/objeto para asignarlos a una variable/constante/función.

const names = students.map(student => {
  return {
    ...student, // añade todos los elementos del objeto
    title: `${student.name}-${student.course}`
  }
})

console.log(names)

// Al mismo momento que estamos copiando los elementos con el Spread Operator podemos 
también modficar elementos al mismo tiempo, pero debemos escribir el elemento a modificar 
DESPUES del spread operator, recordar, primero se copian los elemento y despúes se modifican.

//entonces, queremos cambiar el course de cada estudiante:

const names = students.map(student => {
  return {
    ...student, // añade todos los elementos del objeto
    course: `Backend Programmer`
  }
})

console.log(names)

//Nota: map NO altera o muta los datos del objeto(arreglo) inicial, en este ejemplo con el 
que estamos trabajando, students es el arreglo inicial, y names es el arreglo retornado por map.

//El código anterior puede escribirse de una forma más resumida:

const names = students.map(student => ({
    ...student, // añade todos los elementos del objeto
    course: `Backend Programmer`
}))
console.log(names) 

// Nos ahorramos el return, pero debemos ubicar los parentesis antes de abrir las llaves 
para que el programa no interprente lo que está dentro del objeto como el cuerpo de la función. 
revisar esta parte si hay dudas: https://youtu.be/qqR1enOceVg

// Podemos usar map las veces que queramos

const doubleage = students.map(student => ({
    ...student, // añade todos los elementos del objeto
    course: `Backend Programmer` 
})).map(student => ({...student,age: student.age * 2}))

console.log(doubleage) 




// MÉTODO Filter 

// Filter crea un nuevo array con todos los elementos que cumplan la condición 
implementada por la función dada.

const result = students.filter(function(student) {
  if (student.course === `Web Development`) {
    return true;
  }
})

console.log(result)

// Podemos resumir el código anterior con una función flecha

const result = students.filter(student => student.course === `Web Development`)

console.log(result) 

// Pueden ser condiciones distintas (retorna students con edad menor o igual a 20)

const result = students.filter(student => student.age <= 20 )

console.log(result)




// MÉTODO Reduce

// Supongamos que quisieramos crear un método que nos sume las edades de todos 
los estudiantes, primero observemos como resolveríamos esto con un ciclo for

let total = 0

for (let i = 0; i < students.length; i++) {
  total += students[i].age
}

console.log(total); 

// Ahora lo haremos con reduce

const result = students.reduce(function(total,student) {
  return total + student.age
}, 0) // valor inicial del acumulador

console.log(result); 

// Podemos reducir lo anterior a una línea de código

const result = students.reduce((total,student) => total + student.age, 0) 

// Otro ejemplo, creamos un arreglo developers

const developers = [
  {
    id: 1,
    name: "John",
    skills: ["HTML", "React", "JavaScript", "Java"],
  },
  {
    id: 2,
    name: "Jane",
    skills: ["HTML", "CSS", "JavaScript", "React", "Redux", "NodeJS"],
  },
  {
    id: 3,
    name: "Jack",
    skills: ["HTML", "CSS", "JavaScript", "React", "Redux", "NodeJS"],
  },
];

// Queremos un arreglo de las habilidades de todos los developers, usamos reduce, ya 
que con él podemos reducir estos valores en uno

const result = developers.reduce(function (allSkills, student) {
  return Array.from(new Set([...allSkills, ...student.skills]))
}, [])

console.log(result) 

// Set añade nuevos elementos a un conjunto, pero si ya están repetidos no los 
va a duplicar, sin embargo, esto No genera un nuevo arreglo, usamos Array para 
formar el array con los elemnetos unidos. 

//En resumidas lo que hicimos fué copiar los elementos en un arreglo, los pasamos 
por un set y los convertimos en otro para que se limpien y finalmente los convertimos 
de nuevo en un arreglo.




// MÉTODO Sort

// ordena los elementos de un arreglo (array) localmente y devuelve el arreglo ordenado, 
veamos el siguiente ejemplo, queremos ordenar la lista de estudiantes de menor a mayor 
según su edad:

const sortedStudents = students.sort(function(first,second) {
  if (first.age > second.age) {
    return 1
  } else {
    return -1
  }
})

console.log(sortedStudents) 

// Podemos resumir el código anterior
                                                           //Ope.Ternario
const sortedStudents = students.sort((a,b) => a.age > b.age ? 1 : -1)
console.log(sortedStudents) 

console.log(sortedStudents) 

// Otra forma de validar es restando los valores, si un valor al restarlo con otro me da 
un residuo, significa que el primer valor es mayor

const sortedStudents = students.sort((a,b) => a.age - b.age)

console.log(sortedStudents) 

// Cuando queremos ordenar números con sort, sort no ordena los números de forma numérica 
sino de forma alfabética, los ordena como caracteres, veamos un ejemplo:

const numbers = [10,30,1000,100]

console.log(numbers.sort()) // [10,100,1000,30] 

// Si quisieramos ordenarlos de una manera correcta tendríamos que utilizar una formula 
como la de sortedStudents

const numbers = [10,30,1000,100]

console.log(numbers.sort((a,b) => a - b)) // [10,30,100,1000] 




// MÉTODO Find

// Find nos permite buscar un elemento de un arreglo, digamos que queremos buscar un 
elemento dentro un arreglo, por ejemplo, queremos todo el objeto donde el nombre sea John

const result = students.find(function(student) {
  if(student.name === "John") {
    return 1
  }
})

console.log(result) 

// Podemos abreviar la escritura del código

const result = students.find(student => student.name === "John") 
   
// Cuanto no encuentra el resultado, sea por una mala escritura del código o porque 
simplemente no existe el elemento a buscar, retorna undefined




// MÉTODO Some

// Some sólo retorna un valor boolean dependiendo de si se cumple la condición o no, 
para este ejemplo queremos saber el estudiante con mayoría de edad

const result = students.some(function(student) {
  if (student.age > 20) {
    return true
  }
}) 

console.log(result) // true 

// Podemos abreviar el código anterior

const result = students.some(student => student.age > 20) 

console.log(result) 

// Podríamos aplicar el método some para otros casos, validemos si se encuentra el apellido "Doe"

const result = students.some(student => student.lastname === `Doe`) 

console.log(result) // true 




// MÉTODO Every

// El método Every tiene la misma función que el método some, sin embargo, retornará 
true o false SÓLO si TODOS los objetos cumplen con la condicion puesta

const result = students.every(student => student.age === 20)

console.log(result) // Nos retornará false porque no cumple con la condición, No todos 
los estudiantes tienen 20 años, basta con que un objeto no cumpla la condicion para que 
retorne FALSE 

// Podríamos usarlo no sólo para validar datos que incluyan números

const result = students.every(student => student.name.includes(`J`)) 

// Lo anterior retornará false porque hay un sólo estudiante que no tiene la letra J en su nombre, 
puede modificar el nombre del estudiante para observar el true que debería ser retornado si todos 
tuvieran la J en sus nombres.




// COMBINAR MÉTODOS 

// 1. Queremos convertir name y lastname en una sóla propiedad, además de eso queremos la edad y NO el curso.

const result = students.map(student => ({
  student: `${student.name} ${student.lastname}`,
  age: `${student.age}`  
}))

console.log(result)  

// Podemos destructurar el código anterior

// {name,lastn..,age} <- las propiedades que vamos a trabajar
// ({}) los encerramos con() porque accedemos a los parametros de un objeto

const result = students.map(({name,lastname,age}) => ({
  student: `${name} ${lastname}`,
  age
}))
  .filter(student => student.age > 20) // Filtramos por mayores de 20
  .sort((a,b) => a.age - b.age) //Organiza de mayor a menor, contario sería b.age - a.age
  .reduce((total,student) => total + student.age, 0) // Retorna suma de las edades

console.log(result) 
*/
